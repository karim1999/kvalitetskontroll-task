services:
    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        restart: unless-stopped
        ports:
            - "5672:5672"
            - "15672:15672"
        networks:
            - microservices-network
        environment:
            RABBITMQ_DEFAULT_USER: rabbitmq
            RABBITMQ_DEFAULT_PASS: rabbitmq
    api-gateway-service-nginx:
        image: nginx:alpine
        container_name: api-gateway-service-nginx
        restart: unless-stopped
        ports:
            - 8000:80
        volumes:
            - ./api-gateway-service/:/var/www
            - ./api-gateway-service/nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - api-gateway-service-network
        depends_on:
            - api-gateway-service-app
            - rabbitmq
    api-gateway-service-app:
        build:
            args:
                user: karim
                uid: 1000
            context: ./api-gateway-service/
            dockerfile: Dockerfile
        image: api-gateway-service-app
        container_name: api-gateway-service-app
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - ./api-gateway-service/:/var/www
        networks:
            - microservices-network
            - api-gateway-service-network
        environment:
            QUEUE_CONNECTION: sync
            RABBITMQ_HOST: rabbitmq
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: rabbitmq
            RABBITMQ_PASSWORD: rabbitmq
            RABBITMQ_VHOST: /
            USER_SERVICE_HOST: user-service-nginx
            USER_SERVICE_PORT: 80
            ADMIN_SERVICE_HOST: admin-service-nginx
            ADMIN_SERVICE_PORT: 80
            PRODUCT_SERVICE_HOST: product-service-nginx
            PRODUCT_SERVICE_PORT: 80
            ORDER_SERVICE_HOST: order-service-nginx
            ORDER_SERVICE_PORT: 80
    user-service-nginx:
        image: nginx:alpine
        container_name: user-service-nginx
        restart: unless-stopped
        ports:
            - 8001:80
        volumes:
            - ./user-service/:/var/www
            - ./user-service/nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - microservices-network
            - user-service-network
        depends_on:
            - user-service-app
            - user-service-db
            - rabbitmq
    user-service-app:
        build:
            args:
                user: karim
                uid: 1000
            context: ./user-service/
            dockerfile: Dockerfile
        image: user-service-app
        container_name: user-service-app
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - ./user-service/:/var/www
        networks:
            - microservices-network
            - user-service-network
        environment:
            DB_CONNECTION: pgsql
            DB_HOST: user-service-db
            DB_PORT: 5432
            DB_DATABASE: user-service
            DB_USERNAME: root
            DB_PASSWORD: password
            QUEUE_CONNECTION: sync
            RABBITMQ_HOST: rabbitmq
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: rabbitmq
            RABBITMQ_PASSWORD: rabbitmq
            RABBITMQ_VHOST: /
    user-service-db:
        image: postgres
        container_name: user-service-db
        volumes:
            - ./user-service/postgresql/data:/var/lib/postgresql/data
        ports:
            - 5431:5432
        networks:
            - user-service-network
        environment:
            POSTGRES_DB: user-service
            POSTGRES_USER: root
            POSTGRES_PASSWORD: password
    admin-service-nginx:
        image: nginx:alpine
        container_name: admin-service-nginx
        restart: unless-stopped
        ports:
            - 8002:80
        volumes:
            - ./admin-service/:/var/www
            - ./admin-service/nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - microservices-network
            - admin-service-network
        depends_on:
            - admin-service-app
            - admin-service-db
            - rabbitmq
    admin-service-app:
        build:
            args:
                user: karim
                uid: 1000
            context: ./admin-service/
            dockerfile: Dockerfile
        image: admin-service-app
        container_name: admin-service-app
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - ./admin-service/:/var/www
        networks:
            - microservices-network
            - admin-service-network
        environment:
            DB_CONNECTION: pgsql
            DB_HOST: admin-service-db
            DB_PORT: 5432
            DB_DATABASE: admin-service
            DB_USERNAME: root
            DB_PASSWORD: password
            QUEUE_CONNECTION: sync
            RABBITMQ_HOST: rabbitmq
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: rabbitmq
            RABBITMQ_PASSWORD: rabbitmq
            RABBITMQ_VHOST: /
    admin-service-db:
        image: postgres
        container_name: admin-service-db
        volumes:
            - ./admin-service/postgresql/data:/var/lib/postgresql/data
        ports:
            - 5432:5432
        networks:
            - admin-service-network
        environment:
            POSTGRES_DB: admin-service
            POSTGRES_USER: root
            POSTGRES_PASSWORD: password
    product-service-nginx:
        image: nginx:alpine
        container_name: product-service-nginx
        restart: unless-stopped
        ports:
            - 8003:80
        volumes:
            - ./product-service/:/var/www
            - ./product-service/nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - microservices-network
            - product-service-network
        depends_on:
            - product-service-app
            - product-service-db
            - rabbitmq
    product-service-app:
        build:
            args:
                user: karim
                uid: 1000
            context: ./product-service/
            dockerfile: Dockerfile
        image: product-service-app
        container_name: product-service-app
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - ./product-service/:/var/www
        networks:
            - microservices-network
            - product-service-network
        environment:
            DB_CONNECTION: pgsql
            DB_HOST: product-service-db
            DB_PORT: 5432
            DB_DATABASE: product-service
            DB_USERNAME: root
            DB_PASSWORD: password
            QUEUE_CONNECTION: sync
            RABBITMQ_HOST: rabbitmq
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: rabbitmq
            RABBITMQ_PASSWORD: rabbitmq
            RABBITMQ_VHOST: /
    product-service-db:
        image: postgres
        container_name: product-service-db
        volumes:
            - ./product-service/postgresql/data:/var/lib/postgresql/data
        ports:
            - 5433:5432
        networks:
            - product-service-network
        environment:
            POSTGRES_DB: product-service
            POSTGRES_USER: root
            POSTGRES_PASSWORD: password
    order-service-nginx:
        image: nginx:alpine
        container_name: order-service-nginx
        restart: unless-stopped
        ports:
            - 8004:80
        volumes:
            - ./order-service/:/var/www
            - ./order-service/nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - microservices-network
            - order-service-network
        depends_on:
            - order-service-app
            - order-service-db
            - rabbitmq
    order-service-app:
        build:
            args:
                user: karim
                uid: 1000
            context: ./order-service/
            dockerfile: Dockerfile
        image: order-service-app
        container_name: order-service-app
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - ./order-service/:/var/www
        networks:
            - microservices-network
            - order-service-network
        environment:
            DB_CONNECTION: pgsql
            DB_HOST: order-service-db
            DB_PORT: 5432
            DB_DATABASE: order-service
            DB_USERNAME: root
            DB_PASSWORD: password
            QUEUE_CONNECTION: sync
            RABBITMQ_HOST: rabbitmq
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: rabbitmq
            RABBITMQ_PASSWORD: rabbitmq
            RABBITMQ_VHOST: /
    order-service-db:
        image: postgres
        container_name: order-service-db
        volumes:
            - ./order-service/postgresql/data:/var/lib/postgresql/data
        ports:
            - 5434:5432
        networks:
            - order-service-network
        environment:
            POSTGRES_DB: order-service
            POSTGRES_USER: root
            POSTGRES_PASSWORD: password
    notification-service-nginx:
        image: nginx:alpine
        container_name: notification-service-nginx
        restart: unless-stopped
        ports:
            - 8005:80
        volumes:
            - ./notification-service/:/var/www
            - ./notification-service/nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - notification-service-network
        depends_on:
            - notification-service-app
            - rabbitmq
    notification-service-app:
        build:
            args:
                user: karim
                uid: 1000
            context: ./notification-service/
            dockerfile: Dockerfile
        image: notification-service-app
        container_name: notification-service-app
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - ./notification-service/:/var/www
        networks:
            - microservices-network
            - notification-service-network
        environment:
            QUEUE_CONNECTION: sync
            RABBITMQ_HOST: rabbitmq
            RABBITMQ_PORT: 5672
            RABBITMQ_USER: rabbitmq
            RABBITMQ_PASSWORD: rabbitmq
            RABBITMQ_VHOST: /
networks:
    api-gateway-service-network:
        driver: bridge
    order-service-network:
        driver: bridge
    product-service-network:
        driver: bridge
    notification-service-network:
        driver: bridge
    user-service-network:
        driver: bridge
    admin-service-network:
        driver: bridge
    microservices-network:
        driver: bridge